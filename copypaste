#!/usr/bin/python3

import argparse
import os


class Copypaste:
    def __init__(self, namespace, subdir):
        # Destination namespace
        self.namespace = namespace
        # Relative directory where the destination files are to be found in the
        # target process
        self.subdir = subdir

    def convert(self, buf):
        if self.namespace:
            dest_namespace = self.namespace.encode("utf-8")
            dest_const = self.namespace.upper().replace("::", "_").encode("utf-8")
            ns_components = self.namespace.split("::")
            ns_open = "".join("namespace {} {{\n".format(x) for x in ns_components).encode("utf-8")
            ns_close = "".join("\n}" for x in range(len(ns_components))).encode("utf-8")

        # Replace namespace and const names
        if self.namespace:
            buf = buf.replace(b"namespace wobblepy {\n", ns_open)
            buf = buf.replace(b"\n} // wobblepy", ns_close)
            buf = buf.replace(b"wobblepy", dest_namespace)
            buf = buf.replace(b"wobblepy".upper(), dest_const)

        return buf

    def generate(self, srcdir, destdir):
        """
        Copy the wobblepy sources to destdir, applying the transformations defined in
        args
        """
        for root, dirnames, filenames in os.walk(srcdir):
            if self.subdir:
                destpath = os.path.join(destdir, self.subdir, os.path.relpath(root, srcdir))
            else:
                destpath = os.path.join(destdir, os.path.relpath(root, srcdir))

            for fn in filenames:
                if fn.endswith("-test.cc"):
                    continue
                if not fn.endswith(".h") and not fn.endswith(".cc"):
                    continue
                os.makedirs(destpath, exist_ok=True)

                with open(os.path.join(root, fn), "rb") as fd:
                    buf = fd.read()

                buf = self.convert(buf)

                with open(os.path.join(destpath, fn), "wb") as fd:
                    fd.write(buf)


def main():
    parser = argparse.ArgumentParser(description="Create a copy of wobblepy for inclusion into a different project.")
    parser.add_argument("--namespace", action="store", help="namespace to use in the destination code")
    parser.add_argument("--subdir", action="store", help="subdirectory for the code in the target project")
    parser.add_argument("destdir", action="store", help="destination directory")

    args = parser.parse_args()

    copypaste = Copypaste(args.namespace, args.subdir)
    copypaste.generate("wobblepy", args.destdir)


if __name__ == "__main__":
    main()
