#!/usr/bin/python3

import argparse
import os
from pathlib import Path


class Copypaste:
    def __init__(self, namespace: str, subdir: Path) -> None:
        # Destination namespace
        self.namespace = namespace
        # Relative directory where the destination files are to be found in the
        # target process
        self.subdir = subdir

    def convert(self, buf: bytes) -> bytes:
        if self.namespace:
            dest_namespace = self.namespace.encode("utf-8")
            dest_const = self.namespace.upper().replace("::", "_").encode("utf-8")
            ns_components = self.namespace.split("::")
            ns_open = f"namespace {'::'.join(ns_components)} {{\n".encode("utf-8")

        # Replace namespace and const names
        if self.namespace:
            buf = buf.replace(b"namespace wobblepy {\n", ns_open)
            buf = buf.replace(b"wobblepy", dest_namespace)
            buf = buf.replace(b"wobblepy".upper(), dest_const)

        return buf

    def generate(self, srcdir: Path, destdir: Path) -> None:
        """
        Copy the wobblepy sources to destdir, applying the transformations defined in
        args
        """
        for root, dirnames, filenames in os.walk(srcdir):
            dirnames[:] = [d for d in dirnames if not d.startswith(".")]
            if self.subdir:
                destpath = destdir / self.subdir / srcdir.relative_to(Path(root))
            else:
                destpath = destdir / srcdir.relative_to(Path(root))

            for fn in filenames:
                if fn.startswith("."):
                    continue
                if fn.endswith("-test.cc"):
                    continue
                if not fn.endswith(".h") and not fn.endswith(".cc"):
                    continue
                destpath.mkdir(parents=True, exist_ok=True)

                with open(os.path.join(root, fn), "rb") as fd:
                    buf = fd.read()

                buf = self.convert(buf)

                with (destpath / fn).open("rb") as fd:
                    if buf == fd.read():
                        continue

                with (destpath / fn).open("wb") as fd:
                    fd.write(buf)


def main():
    parser = argparse.ArgumentParser(
        description="Create a copy of wobblepy for inclusion into a different project."
    )
    parser.add_argument(
        "--namespace", action="store", help="namespace to use in the destination code"
    )
    parser.add_argument(
        "--subdir",
        action="store",
        type=Path,
        help="subdirectory for the code in the target project",
    )
    parser.add_argument(
        "destdir", type=Path, action="store", help="destination directory"
    )

    args = parser.parse_args()

    copypaste = Copypaste(args.namespace, args.subdir)
    copypaste.generate(Path("wobblepy"), args.destdir)


if __name__ == "__main__":
    main()
